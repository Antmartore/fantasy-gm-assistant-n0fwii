rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for security rules
    function isSignedIn() {
      return request.auth != null 
        && request.auth.uid != null 
        && request.auth.token.exp > request.time;
    }

    function isPremiumUser() {
      return request.auth.token != null 
        && request.auth.token.isPremium == true 
        && request.auth.token.subscriptionExpiry > request.time;
    }

    function isValidFileSize(maxSizeMB) {
      return request.resource.size <= maxSizeMB * 1024 * 1024;
    }

    function isValidContentType(allowedTypes) {
      return request.resource.contentType != null 
        && allowedTypes.hasAny([request.resource.contentType]);
    }

    // AI-generated video content with premium access controls
    match /videos/{userId}/{videoId} {
      allow read: if isSignedIn() 
        && (request.auth.uid == userId || resource.metadata.isPublic == true);
      
      allow write: if isSignedIn() 
        && request.auth.uid == userId 
        && isPremiumUser() 
        && isValidFileSize(100)  // 100MB max for videos
        && isValidContentType(['video/mp4']);
      
      allow delete: if isSignedIn() 
        && request.auth.uid == userId;
    }

    // Thumbnail images for videos and content previews
    match /thumbnails/{userId}/{imageId} {
      allow read: if isSignedIn();
      
      allow write: if isSignedIn() 
        && request.auth.uid == userId 
        && isValidFileSize(5)  // 5MB max for images
        && isValidContentType(['image/jpeg', 'image/png', 'image/webp']);
      
      allow delete: if isSignedIn() 
        && request.auth.uid == userId;
    }

    // Data exports and reports for premium users
    match /exports/{userId}/{fileId} {
      allow read: if isSignedIn() 
        && request.auth.uid == userId;
      
      allow write: if isSignedIn() 
        && request.auth.uid == userId 
        && isPremiumUser() 
        && isValidFileSize(25);  // 25MB max for exports
      
      allow delete: if isSignedIn() 
        && request.auth.uid == userId;
    }

    // Temporary storage for processing and uploads
    match /temp/{userId}/{fileId} {
      allow read: if isSignedIn() 
        && request.auth.uid == userId;
      
      allow write: if isSignedIn() 
        && request.auth.uid == userId 
        && isValidFileSize(50);  // 50MB max for temp files
      
      allow delete: if isSignedIn() 
        && request.auth.uid == userId;
    }

    // Deny access to all other paths by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}