[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fantasy-gm-assistant-backend"
version = "1.0.0"
description = "AI-Powered Fantasy Sports GM Assistant backend service providing real-time analytics and recommendations"
authors = ["Fantasy GM Assistant Team <team@fantasygm.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://fantasygm.com"
repository = "https://github.com/fantasygm/fantasy-gm-assistant"
documentation = "https://docs.fantasygm.com"
keywords = ["fantasy-sports", "ai", "machine-learning", "sports-analytics"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment :: Simulation",
]
packages = [
    { include = "app", from = "src/backend" }
]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
fastapi = "^0.100.0"
uvicorn = "^0.23.0"
pydantic = "^2.0.0"
sqlalchemy = "^2.0.0"
alembic = "^1.11.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
redis = "^4.6.0"
boto3 = "^1.28.0"
firebase-admin = "^6.2.0"
openai = "^0.27.8"
pandas = "^2.0.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"
httpx = "^0.24.0"
python-dotenv = "^1.0.0"
tenacity = "^8.2.0"
structlog = "^23.1.0"
sentry-sdk = "^1.28.0"
prometheus-client = "^0.17.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
black = "^23.7.0"
isort = "^5.12.0"
mypy = "^1.4.0"
bandit = "^1.7.0"
safety = "^2.3.0"
pre-commit = "^3.3.0"
flake8 = "^6.0.0"
flake8-docstrings = "^1.7.0"
types-redis = "^4.6.0"
types-requests = "^2.31.0"
faker = "^19.2.0"
freezegun = "^1.2.0"
responses = "^0.23.0"
locust = "^2.15.0"

[tool.poetry.scripts]
start = "app.main:start"
migrate = "app.db.migrations.run:main"
create-admin = "app.scripts.create_admin:main"

[tool.black]
line-length = 100
target-version = ["py311"]
include = "src/backend/app/**/*.py"
extend-exclude = "/migrations/"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 100
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
strict_optional = true
warn_return_any = true
warn_unused_ignores = true
check_untyped_defs = true
show_error_codes = true
exclude = ["tests/", "migrations/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=app --cov-report=term-missing --cov-report=xml --cov-fail-under=90"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]
targets = ["src/backend/app"]

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError"
]