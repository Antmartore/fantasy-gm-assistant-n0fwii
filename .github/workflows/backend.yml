name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend.yml'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.5.1'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fantasy-gm-assistant-backend
  ECS_CLUSTER: fantasy-gm-assistant-cluster
  ECS_SERVICE: backend-service
  MIN_COVERAGE: 90

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          cd src/backend
          poetry install --no-interaction --no-root

      - name: Run linting and type checks
        run: |
          cd src/backend
          poetry run black . --check
          poetry run isort . --check-only
          poetry run mypy .
          poetry run flake8 .

      - name: Run tests with coverage
        run: |
          cd src/backend
          poetry run pytest --cov=app --cov-report=xml --cov-fail-under=${{ env.MIN_COVERAGE }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: src/backend/coverage.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk scan
        uses: snyk/actions/python@v1
        with:
          command: test
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check@v1
        with:
          project: 'fantasy-gm-assistant-backend'
          path: 'src/backend'
          format: 'HTML'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            snyk-report.json
            dependency-check-report.html

  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report

      - name: SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@v1.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=fantasy-gm-assistant-backend
            -Dsonar.organization=fantasygm
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=src/backend/app
            -Dsonar.tests=src/backend/tests

  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd src/backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE }} \
            --query taskDefinition > task-definition.json

      - name: Update ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: |
            version: 0.0
            Resources:
              - TargetService:
                  Type: AWS::ECS::Service
                  Properties:
                    TaskDefinition: <TASK_DEFINITION>
                    LoadBalancerInfo:
                      ContainerName: "backend"
                      ContainerPort: 8000
                    PlatformVersion: "LATEST"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}